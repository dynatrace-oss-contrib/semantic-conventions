groups:
  - id: metric_attributes.http.server
    type: attribute_group
    brief: 'HTTP server attributes'
    extends: attributes.http.server
    attributes:
      - ref: server.address
        requirement_level: opt_in
        note: |
          See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
          > **Warning**
          > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
          > to trigger cardinality limits, degrading the usefulness of the metric.
      - ref: server.port
        requirement_level: opt_in
        note: |
          See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
          > **Warning**
          > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
          > to trigger cardinality limits, degrading the usefulness of the metric.
  - id: metric_attributes.http.client
    type: attribute_group
    brief: 'HTTP client attributes'
    extends: attributes.http.client

  - id: metric.http.server.request.duration
    type: metric
    metric_name: http.server.request.duration
    brief: "Duration of HTTP server requests."
    instrument: histogram
    unit: "s"
    stability: stable
    extends: metric_attributes.http.server

  - id: metric.http.server.active_requests
    type: metric
    metric_name: http.server.active_requests
    stability: experimental
    brief: "Number of active HTTP server requests."
    instrument: updowncounter
    unit: "{request}"
    attributes:
      - ref: http.request.method
        requirement_level: required
      - ref: url.scheme
        requirement_level: required
        examples: ["http", "https"]
      - ref: server.address
        requirement_level: opt_in
        brief: >
          Name of the local HTTP server that received the request.
        note: |
          See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
          > **Warning**
          > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
          > to trigger cardinality limits, degrading the usefulness of the metric.
      - ref: server.port
        requirement_level: opt_in
        brief: >
          Port of the local HTTP server that received the request.
        note: |
          See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
          > **Warning**
          > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
          > to trigger cardinality limits, degrading the usefulness of the metric.

  - id: metric.http.server.request.body.size
    type: metric
    metric_name: http.server.request.body.size
    stability: experimental
    brief: "Size of HTTP server request bodies."
    instrument: histogram
    unit: "By"
    note: >
      The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.server

  - id: metric.http.server.response.body.size
    type: metric
    metric_name: http.server.response.body.size
    stability: experimental
    brief: "Size of HTTP server response bodies."
    instrument: histogram
    unit: "By"
    note: >
      The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.server

  - id: metric.http.client.request.duration
    type: metric
    metric_name: http.client.request.duration
    brief: "Duration of HTTP client requests."
    instrument: histogram
    unit: "s"
    stability: stable
    extends: metric_attributes.http.client

  - id: metric.http.client.request.body.size
    type: metric
    metric_name: http.client.request.body.size
    stability: experimental
    brief: "Size of HTTP client request bodies."
    instrument: histogram
    unit: "By"
    note: >
      The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.client

  - id: metric.http.client.response.body.size
    type: metric
    metric_name: http.client.response.body.size
    stability: experimental
    brief: "Size of HTTP client response bodies."
    instrument: histogram
    unit: "By"
    note: >
      The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.client

  - id: metric.http.client.open_connections
    type: metric
    metric_name: http.client.open_connections
    stability: experimental
    brief: "Number of outbound HTTP connections that are currently active or idle on the client."
    instrument: updowncounter
    unit: "{connection}"
    attributes:
      - ref: http.connection.state
        requirement_level: required
      - ref: network.peer.address
        requirement_level: recommended
        brief: Remote IP address of the socket connection.
        examples: ["10.1.2.80"]
      - ref: network.protocol.version
        requirement_level: recommended
        brief: HTTP protocol version of the connection in the connection pool.
        note: >
          HTTP 1.0 and 1.1 requests share connections in the connection pool and are both reported as version `1.1`.
          So, the `network.protocol.version` value reported on connection metrics is different than the one reported
          on request-level metrics or spans for HTTP 1.0 requests.
        examples: ["1.1", "2", "3"]
      - ref: server.address
        requirement_level: required
        brief: >
          Host identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
        note: >
          If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then
          `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.
      - ref: server.port
        requirement_level:
          conditionally_required: If not the default (`80` for `http` scheme, `443` for `https`).
        brief: >
          Port identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
      - ref: url.scheme
        requirement_level: recommended
        examples: ['http', 'https', 'ftp']

  - id: metric.http.client.connection.duration
    type: metric
    metric_name: http.client.connection.duration
    stability: experimental
    brief: "The duration of the successfully established outbound HTTP connections."
    instrument: histogram
    unit: "s"
    attributes:
      - ref: network.peer.address
        requirement_level: recommended
      - ref: network.protocol.version
        requirement_level: recommended
        brief: HTTP protocol version of the connection in the connection pool.
        note: >
          HTTP 1.0 and 1.1 requests share connections in the connection pool and are both reported as version `1.1`.
          So, the `network.protocol.version` value reported on connection metrics is different than the one reported
          on request-level metrics or spans for HTTP 1.0 requests.
        examples: ["1.1", "2", "3"]
      - ref: server.address
        requirement_level: required
        brief: >
          Host identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
        note: >
          If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then
          `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.
      - ref: server.port
        requirement_level:
          conditionally_required: If not the default (`80` for `http` scheme, `443` for `https`).
        brief: >
          Port identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
      - ref: url.scheme
        requirement_level: recommended
        examples: ['http', 'https', 'ftp']

  - id: metric.http.client.request.time_in_queue
    type: metric
    metric_name: http.client.request.time_in_queue
    stability: experimental
    brief: "The amount of time requests spent on a queue waiting for an available connection."
    instrument: histogram
    unit: "s"
    attributes:
      - ref: http.request.method
        requirement_level: recommended
        note: >
          HTTP request method value is one of the "known" methods listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)
          and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).

          If the HTTP request method isn't known, it sets the `http.request.method` attribute to `_OTHER`.
          It's not possible at the moment to override the list of known HTTP methods.
      - ref: network.protocol.version
        requirement_level: recommended
        brief: HTTP protocol version of the connection in the connection pool.
        note: >
          HTTP 1.0 and 1.1 requests share connections in the connection pool and are both reported as version `1.1`.
          So, the `network.protocol.version` value reported on connection metrics is different than the one reported
          on request-level metrics or spans for HTTP 1.0 requests.
        examples: ["1.1", "2", "3"]
      - ref: server.address
        requirement_level: required
        brief: >
          Host identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
        note: >
          If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then
          `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.
      - ref: server.port
        requirement_level:
          conditionally_required: If not the default (`80` for `http` scheme, `443` for `https`).
        brief: >
          Port identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
      - ref: url.scheme
        requirement_level: recommended
        examples: ['http', 'https', 'ftp']

  - id: metric.http.client.active_requests
    type: metric
    metric_name: http.client.active_requests
    stability: experimental
    brief: "Number of active HTTP requests."
    instrument: updowncounter
    unit: "{request}"
    attributes:
      - ref: http.request.method
        requirement_level: recommended
        note: >
          HTTP request method value is one of the "known" methods listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)
          and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).

          If the HTTP request method isn't known, it sets the `http.request.method` attribute to `_OTHER`.
          It's not possible at the moment to override the list of known HTTP methods.
      - ref: server.address
        requirement_level: required
        brief: >
          Host identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
        note: >
          If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then
          `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.
      - ref: server.port
        requirement_level:
          conditionally_required: If not the default (`80` for `http` scheme, `443` for `https`).
        brief: >
          Port identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
      - ref: url.scheme
        requirement_level: recommended
        examples: ['http', 'https', 'ftp']
